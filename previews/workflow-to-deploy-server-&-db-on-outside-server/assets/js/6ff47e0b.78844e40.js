"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5871],{8453:(e,s,r)=>{r.d(s,{R:()=>c,x:()=>d});var n=r(6540);const t={},i=n.createContext(t);function c(e){const s=n.useContext(i);return n.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function d(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),n.createElement(i.Provider,{value:s},e.children)}},8482:(e,s,r)=>{r.r(s),r.d(s,{assets:()=>o,contentTitle:()=>d,default:()=>h,frontMatter:()=>c,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"guides/new-service","title":"New Service","description":"Quick summary","source":"@site/docs/guides/new-service.mdx","sourceDirName":"guides","slug":"/guides/new-service","permalink":"/area/guides/new-service","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"new-service","title":"New Service"},"sidebar":"guidesSidebar","previous":{"title":"Contributing Guide","permalink":"/area/guides/contributing"},"next":{"title":"New Action or Reaction","permalink":"/area/guides/new-action-reaction"}}');var t=r(4848),i=r(8453);const c={id:"new-service",title:"New Service"},d="New Service",o={},l=[{value:"Quick summary",id:"quick-summary",level:2},{value:"Files to edit/add",id:"files-to-editadd",level:2},{value:"Step-by-step: Add a new OAuth-enabled service (example: Github)",id:"step-by-step-add-a-new-oauth-enabled-service-example-github",level:2},{value:"Common pitfalls and checks",id:"common-pitfalls-and-checks",level:2}];function a(e){const s={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"new-service",children:"New Service"})}),"\n",(0,t.jsx)(s.h2,{id:"quick-summary",children:"Quick summary"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["Input: add the service entry to ",(0,t.jsx)(s.code,{children:"server/src/database/setupServices.js"}),"."]}),"\n",(0,t.jsxs)(s.li,{children:["For OAuth services: add provider middleware, register Passport strategy, wire routes in ",(0,t.jsx)(s.code,{children:"server/src/routes/oauthRoute.js"}),", implement token refresh logic in ",(0,t.jsx)(s.code,{children:"server/src/utils/refreshTokens.js"}),", and ensure ",(0,t.jsx)(s.code,{children:"server/src/utils/getAccessToken.js"})," supports the service."]}),"\n",(0,t.jsxs)(s.li,{children:["Output: service is seeded on server start, users can link accounts via OAuth, and actions/reactions can call third-party APIs using ",(0,t.jsx)(s.code,{children:"getAccessToken(area, '<ServiceName>')"}),"."]}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"files-to-editadd",children:"Files to edit/add"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"server/src/database/setupServices.js"})," \u2014 add your service object to the array so it is seeded at server start."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"server/src/middleware/auth/oauth<Provider>.js"})," \u2014 create a Passport/OAuth strategy file (follow existing examples: ",(0,t.jsx)(s.code,{children:"oauthGoogle.js"}),", ",(0,t.jsx)(s.code,{children:"oauthGithub.js"}),")."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"server/src/routes/oauthRoute.js"})," \u2014 register the new provider routes (",(0,t.jsx)(s.code,{children:"/auth/<provider>"})," and ",(0,t.jsx)(s.code,{children:"/auth/<provider>/callback"}),") similarly to existing providers."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"server/src/utils/refreshTokens.js"})," \u2014 implement refresh logic for the provider."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"server/src/utils/getAccessToken.js"})," \u2014 add a branch to call the appropriate refresh token helper and return a usable access token."]}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"step-by-step-add-a-new-oauth-enabled-service-example-github",children:"Step-by-step: Add a new OAuth-enabled service (example: Github)"}),"\n",(0,t.jsxs)(s.ol,{children:["\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsx)(s.p,{children:"Add the service to the DB seed"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["Edit ",(0,t.jsx)(s.code,{children:"server/src/database/setupServices.js"})," and add an entry for the service:"]}),"\n"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-js",children:"{ name: 'Github', description: 'Connect GitHub to react to repository activity and automate workflows.' }\n"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["Restart the server; the seeding script runs on boot and creates the ",(0,t.jsx)(s.code,{children:"Service"})," row if it does not exist."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsx)(s.p,{children:"Add Passport strategy / middleware"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["Add a file ",(0,t.jsx)(s.code,{children:"server/src/middleware/auth/oauthGithub.js"})," mirroring the pattern in ",(0,t.jsx)(s.code,{children:"oauthGoogle.js"})," or other providers. This file should export the strategy options (the route code imports a named export like ",(0,t.jsx)(s.code,{children:"githubAuthOptions"}),")."]}),"\n",(0,t.jsxs)(s.li,{children:["The middleware file typically sets up ",(0,t.jsx)(s.code,{children:"passport.use(new Strategy(...))"})," and configures scopes, client IDs, client secrets and the callback URL."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsx)(s.p,{children:"Wire the OAuth routes"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["Open ",(0,t.jsx)(s.code,{children:"server/src/routes/oauthRoute.js"}),". This file centralizes provider routes and shows the exact pattern used by other providers. Add entries similar to the existing Github block if you created a new provider file, for example:"]}),"\n"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-js",children:"router.get('/github', verifyToken, (req, res, next) => {\n  const redirectTo = req.body?.redirect_to || req.query?.redirect_to;\n  const options = { ...githubAuthOptions };\n  const state = redirectTo ? buildState(redirectTo) : undefined;\n  if (state) options.state = state;\n  passport.authenticate('github', options)(req, res, next);\n});\n\nrouter.get('/github/callback',\n  verifyToken,\n  passport.authenticate('github', { failureRedirect: '/login' }),\n  (req, res) => {\n\t const redirectTo = extractRedirectFromState(req);\n\t res.redirect(redirectTo);\n  }\n);\n"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["Note: ",(0,t.jsx)(s.code,{children:"oauthRoute.js"})," already contains helper functions used by providers: ",(0,t.jsx)(s.code,{children:"buildState()"}),", ",(0,t.jsx)(s.code,{children:"extractRedirectFromState()"})," and ",(0,t.jsx)(s.code,{children:"restoreUserFromState()"})," \u2014 follow that pattern so the front-end can pass a redirect path and (optionally) a JWT in the state payload."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsx)(s.p,{children:"Implement token refresh logic"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["Edit ",(0,t.jsx)(s.code,{children:"server/src/utils/refreshTokens.js"})," and add functions to refresh the provider tokens (examples exist for Google, Microsoft, Spotify, etc.). Your refresh function should accept an ",(0,t.jsx)(s.code,{children:"oauthAccount"})," record and return a fresh access token or the updated oauthAccount as needed."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsxs)(s.p,{children:["Wire ",(0,t.jsx)(s.code,{children:"getAccessToken()"})]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["Edit ",(0,t.jsx)(s.code,{children:"server/src/utils/getAccessToken.js"})," and add a switch/case branch to call your refresh function and return the access token. The existing file already contains the pattern used by other services; add your provider name (capitalized like ",(0,t.jsx)(s.code,{children:"Github"}),") to the switch."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsxs)(s.p,{children:["Verify ",(0,t.jsx)(s.code,{children:"UserService"})," linking works"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["When a user completes OAuth consent, the app should create or update ",(0,t.jsx)(s.code,{children:"OAuthAccount"})," and ",(0,t.jsx)(s.code,{children:"UserService"})," rows (look at other provider middleware for the exact save logic). Ensure the ",(0,t.jsx)(s.code,{children:"UserService"})," ",(0,t.jsx)(s.code,{children:"oauth_account_id"})," matches the created ",(0,t.jsx)(s.code,{children:"OAuthAccount"})," so ",(0,t.jsx)(s.code,{children:"getAccessToken()"})," can find it."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsx)(s.p,{children:"Test end-to-end"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Restart the server."}),"\n",(0,t.jsxs)(s.li,{children:["In the browser, sign in and click the provider link to start OAuth (the front-end calls the backend OAuth entrypoints). After consenting, check that:","\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["The user has a new ",(0,t.jsx)(s.code,{children:"OAuthAccount"})," in the DB."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"UserService"})," for that user contains a ",(0,t.jsx)(s.code,{children:"service_id"})," pointing to the seeded service and a ",(0,t.jsx)(s.code,{children:"oauth_account_id"})," pointing to the OAuthAccount."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"getAccessToken(area, '<ServiceName>')"})," returns a non-null token for areas created by that user."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"common-pitfalls-and-checks",children:"Common pitfalls and checks"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["Naming: use the same service canonical name everywhere (",(0,t.jsx)(s.code,{children:"getServiceId()"})," normalizes names by capitalizing the first letter). The service name is used to look up ",(0,t.jsx)(s.code,{children:"Service"})," rows and to map ",(0,t.jsx)(s.code,{children:"UserService"})," links."]}),"\n",(0,t.jsxs)(s.li,{children:["State handling: ",(0,t.jsx)(s.code,{children:"oauthRoute.js"})," allows sending a JWT in the ",(0,t.jsx)(s.code,{children:"state"})," parameter so the callback can restore ",(0,t.jsx)(s.code,{children:"req.user"})," for token linking \u2014 follow the ",(0,t.jsx)(s.code,{children:"buildState()"})," / ",(0,t.jsx)(s.code,{children:"restoreUserFromState()"})," pattern to support this flow."]}),"\n",(0,t.jsxs)(s.li,{children:["verifyToken: some providers require ",(0,t.jsx)(s.code,{children:"verifyToken"})," on the route (see ",(0,t.jsx)(s.code,{children:"spotify"}),", ",(0,t.jsx)(s.code,{children:"discord"}),", ",(0,t.jsx)(s.code,{children:"github"})," usage in ",(0,t.jsx)(s.code,{children:"oauthRoute.js"}),") so the user is already authenticated before linking an external account. Match the pattern used by similar providers."]}),"\n",(0,t.jsxs)(s.li,{children:["Refresh tokens: many providers issue long-lived refresh tokens; saving and using them correctly is key to a good UX (avoid re-auth prompts). Implement refresh logic in ",(0,t.jsx)(s.code,{children:"refreshTokens.js"})," and return stable tokens via ",(0,t.jsx)(s.code,{children:"getAccessToken()"}),"."]}),"\n",(0,t.jsxs)(s.li,{children:["Error handling: make ",(0,t.jsx)(s.code,{children:"getAccessToken()"})," log and return ",(0,t.jsx)(s.code,{children:"null"})," on missing/unlinked accounts so action/reaction handlers can surface a clear error message to the user."]}),"\n"]})]})}function h(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}}}]);